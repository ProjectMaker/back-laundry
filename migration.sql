create type public.app_role as enum ('admin');

create table public.users (
  id          uuid references auth.users not null primary key, -- UUID from auth.users
  email				text,
  firstname   text,
  lastname		text
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';

create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references public.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

create function public.handle_new_user()
returns trigger as $$
declare is_admin boolean;
begin
  insert into public.users (id, email)
  values (new.id, new.email);

  return new;
end;
$$ language plpgsql security definer set search_path = public;

-- DROP TRIGGER [add the name of the trigger function] ON auth.users.

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- DROP TRIGGER on_auth_user_created ON auth.users

-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references public.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

create policy "Allow logged-in read access" on public.materials for select using ( auth.role() = 'authenticated' );
create policy "Allow individual insert access" on public.materials for insert with check ( authorize() );
create policy "Allow individual update access" on public.materials for update using ( authorize() );
create policy "Allow individual delete access" on public.materials for delete using ( authorize() );

create policy "Allow logged-in read access" on public.material_pictures for select using ( auth.role() = 'authenticated' );
create policy "Allow individual insert access" on public.material_pictures for insert with check ( authorize() );
create policy "Allow individual update access" on public.material_pictures for update using ( authorize() );
create policy "Allow individual delete access" on public.material_pictures for delete using ( authorize() );

create policy "Allow logged-in read access" on public.laundry for select using ( auth.role() = 'authenticated' );
create policy "Allow individual insert access" on public.laundry for insert with check ( authorize() );
create policy "Allow individual update access" on public.laundry for update using ( authorize() );
create policy "Allow individual delete access" on public.laundry for delete using ( authorize() );

create policy "Allow logged-in read access" on public.laundry_picture for select using ( auth.role() = 'authenticated' );
create policy "Allow individual insert access" on public.laundry_picture for insert with check ( authorize() );
create policy "Allow individual update access" on public.laundry_picture for update using ( authorize() );
create policy "Allow individual delete access" on public.laundry_picture for delete using ( authorize() );
